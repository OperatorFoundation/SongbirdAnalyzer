#!/bin/bash

# =============================================================================
# MFCC FEATURE EXTRACTION FOR EVALUATION
# =============================================================================
#
# Extracts MFCC features from recorded modified audio files for evaluation
# purposes. This script processes audio recordings that have been modified
# by the Teensy hardware and prepares them for machine learning analysis.
#
# FUNCTION:
# ---------
# - Processes all audio in working-evaluation/ directory
# - Extracts MFCC, Delta, and Delta2 features using automfcc.py
# - Outputs structured CSV data for analysis
# - Validates data integrity and completeness
#
# PREREQUISITES:
# --------------
# - working-evaluation/ must contain recorded modified audio files
# - Python environment with librosa, pandas, and related dependencies
# - automfcc.py script must be available and executable
#
#
# OUTPUT:
# -------
# results/evaluation.csv - MFCC features for all recorded files
# Additional CSV files for different analysis perspectives
#
# =============================================================================

# Load the modular core system
if ! source "$(dirname "$0")/songbird-core/songbird-core.sh"
then
    echo "üí• FATAL: Could not load Songbird core modules" >&2
    echo "   Make sure songbird-core directory exists with required modules" >&2
    exit 1
fi

# Initialize error handling system
setup_error_handling

# Configuration constants
readonly MFCC_SCRIPT_NAME="automfcc.py"
readonly MINIMUM_AUDIO_FILES_THRESHOLD=1
readonly EXPECTED_CSV_HEADERS=("speaker" "wav_file" "mode")

# Parse command line arguments
parse_arguments()
{
    FORCE_MODE=false
    VERBOSE_OPERATIONS=false

    for arg in "$@"
    do
        case $arg in
            --force)
                FORCE_MODE=true
                ;;
            --verbose|-v)
                VERBOSE_OPERATIONS=true
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                warning "Unknown argument: $arg"
                ;;
        esac
    done
}

# Show usage information
show_usage()
{
    cat << EOF
SONGBIRD MFCC FEATURE EXTRACTION

USAGE:
    $0 [options]

OPTIONS:
    --force         Skip confirmation prompts and overwrite existing results
    --verbose, -v   Enable verbose output and detailed progress reporting
    --help, -h      Show this help message

DESCRIPTION:
    Extracts MFCC (Mel-Frequency Cepstral Coefficients) features from recorded
    modified audio files in the evaluation working directory. This prepares
    the audio data for machine learning analysis and evaluation.

PREREQUISITES:
    üìÅ working-evaluation/ directory with recorded audio files
    üêç Python environment with required audio processing libraries
    üìú automfcc.py script available in current directory

OUTPUT FILES:
    üìä results/evaluation.csv - Main MFCC features dataset
    üìã Additional analysis files as generated by automfcc.py

For more information, see the project documentation.
EOF
}

# Validate environment and prerequisites
validate_environment()
{
    print_header "MFCC PROCESSING PREREQUISITES VALIDATION"

    # Check core prerequisites
    local requirements=(
        "python3"
        "working_directory"
    )

    if ! validate_prerequisites "${requirements[@]}"
    then
        error_exit "Environment validation failed. Please install missing prerequisites."
    fi

    # Validate automfcc.py script
    if [[ ! -f "./$MFCC_SCRIPT_NAME" ]]
    then
        error_exit "$MFCC_SCRIPT_NAME not found in current directory. This script is required for feature extraction."
    fi

    if [[ ! -x "./$MFCC_SCRIPT_NAME" ]]
    then
        warning "$MFCC_SCRIPT_NAME is not executable. Attempting to fix..."
        if ! chmod +x "./$MFCC_SCRIPT_NAME"
        then
            error_exit "Failed to make $MFCC_SCRIPT_NAME executable"
        fi
        success "Made $MFCC_SCRIPT_NAME executable"
    fi

    success "Environment validation completed successfully"
}

# Validate working directory structure and content
validate_working_directory()
{
    local working_dir="$1"

    info "Validating working directory: $working_dir"

    # Check if working directory exists
    if [[ ! -d "$working_dir" ]]
    then
        error_exit "Working directory '$working_dir' does not exist.
Run evaluation-setup-environment.sh and evaluation-record-modified-audio.sh first,
or copy existing recorded files to $working_dir."
    fi

    # Check if directory has content
    if [[ -z "$(ls -A "$working_dir" 2>/dev/null)" ]]
    then
        error_exit "Working directory '$working_dir' is empty.
Run evaluation-record-modified-audio.sh to record modified audio files,
or copy existing recordings to this directory."
    fi

    # Count audio files in working directory
    local total_audio_files
    total_audio_files=$(find "$working_dir" -name "*.wav" -type f 2>/dev/null | wc -l)

    if [[ $total_audio_files -lt $MINIMUM_AUDIO_FILES_THRESHOLD ]]
    then
        error_exit "Insufficient audio files found in $working_dir.
Found: $total_audio_files files
Required: At least $MINIMUM_AUDIO_FILES_THRESHOLD files"
    fi

    info "‚úÖ Found $total_audio_files WAV files in working directory"

    # Show directory structure if verbose
    if [[ "$VERBOSE_OPERATIONS" == "true" ]]
    then
        info "Working directory structure:"
        find "$working_dir" -type f -name "*.wav" | head -10 | while read -r file
        do
            local file_size
            if get_file_info "$file" false
            then
                info "  Found: $(basename "$file")"
            fi
        done

        if [[ $total_audio_files -gt 10 ]]
        then
            info "  ... and $((total_audio_files - 10)) more files"
        fi
    fi

    success "Working directory validation completed"
}

# Validate results output directory
validate_results_directory()
{
    local results_file="$1"
    local results_dir
    results_dir=$(dirname "$results_file")

    info "Validating results directory: $results_dir"

    # Ensure results directory exists
    if [[ ! -d "$results_dir" ]]
    then
        info "Creating results directory: $results_dir"
        if ! mkdir -p "$results_dir"
        then
            error_exit "Failed to create results directory: $results_dir"
        fi
    fi

    # Check write permissions
    check_directory_writable "$results_dir" "Results directory not writable"

    # Handle existing results file
    if [[ -f "$results_file" ]]
    then
        if [[ "$FORCE_MODE" == "true" ]]
        then
            warning "Overwriting existing results file: $results_file"
        else
            if ! confirm_action "Results file already exists: $results_file. Overwrite?"
            then
                error_exit "Operation cancelled by user"
            fi
        fi
    fi

    success "Results directory validation completed"
}

# Execute MFCC feature extraction
execute_mfcc_extraction()
{
    local working_dir="$1"
    local results_file="$2"

    print_header "MFCC FEATURE EXTRACTION"

    info "Processing audio features..."
    info "Source directory: $working_dir"
    info "Output file: $results_file"

    local extraction_start_time
    extraction_start_time=$(date +%s)

    # Execute automfcc.py with error handling
    if run_with_error_handling "MFCC feature extraction" \
        python3 "./$MFCC_SCRIPT_NAME" "$working_dir" "$results_file"
    then
        local extraction_end_time
        extraction_end_time=$(date +%s)
        local extraction_duration=$((extraction_end_time - extraction_start_time))

        success "MFCC processing completed successfully in $extraction_duration seconds"
    else
        error_exit "MFCC processing failed. Check automfcc.py output for details."
    fi
}

# Validate generated results
validate_results()
{
    local results_file="$1"

    info "Validating generated results..."

    # Check if results file was created
    if [[ ! -f "$results_file" ]]
    then
        error_exit "Results file was not created: $results_file"
    fi

    # Check if file has content
    local line_count
    line_count=$(wc -l < "$results_file" 2>/dev/null || echo "0")

    if [[ $line_count -le 1 ]]
    then
        error_exit "Results file appears to be empty or only contains header: $line_count lines"
    fi

    info "‚úÖ Results file contains $line_count lines (including header)"

    # Validate CSV structure if verbose
    if [[ "$VERBOSE_OPERATIONS" == "true" ]]
    then
        info "Validating CSV structure..."

        # Check for expected headers
        local header_line
        header_line=$(head -n 1 "$results_file" 2>/dev/null)

        for expected_header in "${EXPECTED_CSV_HEADERS[@]}"
        do
            if [[ "$header_line" == *"$expected_header"* ]]
            then
                info "  ‚úÖ Found expected header: $expected_header"
            else
                warning "  ‚ö†Ô∏è  Missing expected header: $expected_header"
            fi
        done
    fi

    success "Results validation completed"
}

# Display results summary
show_results_summary()
{
    local results_file="$1"

    print_header "MFCC PROCESSING RESULTS SUMMARY"

    echo "Generated files:"
    echo "================"

    # Show main results file
    if [[ -f "$results_file" ]]
    then
        local file_size_info
        file_size_info=$(get_file_info "$results_file" false)
        echo "üìä Main results: $results_file ($file_size_info)"
    fi

    # Show related files that may have been generated
    local results_dir
    results_dir=$(dirname "$results_file")
    local base_name
    base_name=$(basename "$results_file" .csv)

    # Look for related files
    local related_files=()
    for pattern in "_speakers.csv" "_standardized.csv" "_analysis.csv"
    do
        local related_file="$results_dir/${base_name}${pattern}"
        if [[ -f "$related_file" ]]
        then
            related_files+=("$related_file")
        fi
    done

    if [[ ${#related_files[@]} -gt 0 ]]
    then
        echo ""
        echo "Related files:"
        for file in "${related_files[@]}"
        do
            local file_size_info
            file_size_info=$(get_file_info "$file" false)
            echo "üìã $(basename "$file"): $file ($file_size_info)"
        done
    fi

    echo ""
    echo "Next steps:"
    echo "==========="
    echo "üîç Run evaluation-analyze-results.sh to evaluate the processed data"
    echo "üìä Use standardize_features.py if normalization is needed"
    echo "ü§ñ Apply trained models for speaker identification testing"
}

# Main execution function
main()
{
    parse_arguments "$@"

    print_header "MFCC FEATURE EXTRACTION FOR EVALUATION"

    # Validate environment and prerequisites
    validate_environment

    # Validate input and output directories
    validate_working_directory "$WORKING_DIR"
    validate_results_directory "$RESULTS_FILE"

    # Execute MFCC feature extraction
    execute_mfcc_extraction "$WORKING_DIR" "$RESULTS_FILE"

    # Validate and summarize results
    validate_results "$RESULTS_FILE"
    show_results_summary "$RESULTS_FILE"

    success "MFCC processing pipeline completed successfully"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
    main "$@"
fi